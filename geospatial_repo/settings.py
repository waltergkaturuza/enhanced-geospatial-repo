"""
Django settings for geospatial_repo project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
import dj_database_url
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='django-insecure-_(1+gzaf%z+r(nhu#em5g=eifml7cp=96i523xa0rlg1c*un+5')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='localhost,127.0.0.1,.onrender.com', cast=lambda v: [s.strip() for s in v.split(',')])


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 'django.contrib.gis',  # Temporarily disabled - requires PostGIS
    'rest_framework',
    'rest_framework.authtoken',  # For token authentication
    # 'rest_framework_gis',  # Temporarily disabled - depends on django.contrib.gis
    'corsheaders',
    'imagery',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Add WhiteNoise for static files
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'geospatial_repo.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'geospatial_repo.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Use PostgreSQL in production, SQLite in development
DATABASES = {
    'default': dj_database_url.parse(
        config('DATABASE_URL', default=f'sqlite:///{BASE_DIR}/db.sqlite3')
    )
}



# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Additional static files directories (including frontend build)
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'frontend', 'dist'),
    os.path.join(BASE_DIR, 'static'),
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# GDAL Configuration

# GDAL Library Path (if needed for Windows)
if os.name == 'nt':  # Windows
    # Use GDAL from rasterio/fiona packages which include binaries
    import sys
    site_packages = next((p for p in sys.path if 'site-packages' in p), None)
    if site_packages:
        # Point to GDAL library in rasterio.libs
        gdal_lib_path = os.path.join(site_packages, 'rasterio.libs')
        geos_lib_path = os.path.join(site_packages, 'shapely.libs')
        
        # Find the actual GDAL DLL
        import glob
        gdal_dll = glob.glob(os.path.join(gdal_lib_path, 'gdal-*.dll'))
        geos_dll = glob.glob(os.path.join(geos_lib_path, 'geos_c-*.dll'))
        
        if gdal_dll:
            GDAL_LIBRARY_PATH = gdal_dll[0]
        if geos_dll:
            GEOS_LIBRARY_PATH = geos_dll[0]
    
    # Set environment variables for data directories
    gdal_data_path = os.path.join(site_packages, 'rasterio', 'gdal_data')
    proj_data_path = os.path.join(site_packages, 'pyproj', 'proj_data', 'proj')
    
    if os.path.exists(gdal_data_path):
        os.environ['GDAL_DATA'] = gdal_data_path
    if os.path.exists(proj_data_path):
        os.environ['PROJ_LIB'] = proj_data_path

# GIS Configuration
USE_TZ = True

# REST Framework Configuration for GIS
REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
}

# Geospatial Repository System Configuration
GEOSPATIAL_SETTINGS = {
    # Data storage paths
    'IMAGERY_ROOT': os.path.join(BASE_DIR, 'data', 'imagery'),
    'PROCESSED_ROOT': os.path.join(BASE_DIR, 'data', 'processed'),
    'CACHE_ROOT': os.path.join(BASE_DIR, 'data', 'cache'),
    
    # Satellite data providers
    'SATELLITE_PROVIDERS': {
        'sentinel2': {
            'name': 'Sentinel-2',
            'api_endpoint': 'https://catalogue.dataspace.copernicus.eu/odata/v1',
            'resolution': 10,  # meters
            'bands': ['B02', 'B03', 'B04', 'B08'],  # Blue, Green, Red, NIR
        },
        'landsat8': {
            'name': 'Landsat 8',
            'api_endpoint': 'https://m2m.cr.usgs.gov/api/api/json/stable',
            'resolution': 30,  # meters
            'bands': ['B2', 'B3', 'B4', 'B5'],  # Blue, Green, Red, NIR
        },
    },
    
    # Processing settings
    'MAX_CLOUD_COVER': 30,  # Default max cloud cover percentage
    'MAX_AOI_SIZE_KM2': 10000,  # Maximum AOI size in square kilometers
    'CLIP_BUFFER_METERS': 100,  # Buffer around AOI for clipping
    
    # Index calculations
    'SUPPORTED_INDICES': {
        'NDVI': {
            'name': 'Normalized Difference Vegetation Index',
            'formula': '(NIR - Red) / (NIR + Red)',
            'bands_required': ['Red', 'NIR'],
        },
        'NDWI': {
            'name': 'Normalized Difference Water Index',
            'formula': '(Green - NIR) / (Green + NIR)',
            'bands_required': ['Green', 'NIR'],
        },
        'EVI': {
            'name': 'Enhanced Vegetation Index',
            'formula': '2.5 * ((NIR - Red) / (NIR + 6 * Red - 7.5 * Blue + 1))',
            'bands_required': ['Blue', 'Red', 'NIR'],
        },
    },
    
    # HPC/Job scheduler settings
    'JOB_SCHEDULER': 'local',  # 'slurm', 'pbs', 'local'
    'MAX_CONCURRENT_JOBS': 5,
    'JOB_TIMEOUT_HOURS': 24,
}

# Media and file upload settings
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# File upload settings
FILE_UPLOAD_MAX_MEMORY_SIZE = 50 * 1024 * 1024  # 50 MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 50 * 1024 * 1024   # 50 MB
FILE_UPLOAD_PERMISSIONS = 0o644

# Static files collection
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# WhiteNoise settings for serving static files in production
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Ensure static files are properly served
WHITENOISE_USE_FINDERS = True
WHITENOISE_AUTOREFRESH = True

# REST Framework advanced configuration
REST_FRAMEWORK.update({
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    ],
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle'
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '100/hour',
        'user': '1000/hour'
    },
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ]
})

# Logging configuration for production readiness
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'django.log'),
            'formatter': 'verbose',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'imagery_file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'imagery.log'),
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
        'imagery': {
            'handlers': ['imagery_file', 'console'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}

# Additional geospatial and processing settings
GEOSPATIAL_REPO = {
    # Storage paths (absolute paths recommended for production)
    'STORAGE_PATHS': {
        'imagery': os.path.join(BASE_DIR, 'data', 'imagery'),
        'processed': os.path.join(BASE_DIR, 'data', 'processed'),
        'cache': os.path.join(BASE_DIR, 'data', 'cache'),
        'exports': os.path.join(BASE_DIR, 'data', 'exports'),
        'uploads': os.path.join(BASE_DIR, 'data', 'uploads'),
    },
    
    # Satellite data providers configuration
    'PROVIDERS': {
        'sentinel2': {
            'enabled': True,
            'api_url': 'https://catalogue.dataspace.copernicus.eu/odata/v1',
            'max_results': 1000,
            'default_cloud_cover': 30,
        },
        'landsat8': {
            'enabled': True,
            'api_url': 'https://m2m.cr.usgs.gov/api/api/json/stable/',
            'max_results': 1000,
            'default_cloud_cover': 30,
            # Note: Requires USGS M2M API credentials
        },
    },
    
    # Image processing configuration
    'PROCESSING': {
        'max_workers': 4,
        'chunk_size': 1024,  # For large raster processing
        'resampling_method': 'bilinear',
        'compression': 'LZW',
        'nodata_value': -9999,
        'supported_formats': ['GeoTIFF', 'COG', 'NetCDF', 'HDF5'],
        'temp_dir': os.path.join(BASE_DIR, 'data', 'temp'),
    },
    
    # Spectral indices configuration
    'INDICES': {
        'NDVI': {
            'name': 'Normalized Difference Vegetation Index',
            'formula': '(NIR - Red) / (NIR + Red)',
            'bands': ['red', 'nir'],
            'range': [-1.0, 1.0],
        },
        'NDWI': {
            'name': 'Normalized Difference Water Index',
            'formula': '(Green - NIR) / (Green + NIR)',
            'bands': ['green', 'nir'],
            'range': [-1.0, 1.0],
        },
        'NDBI': {
            'name': 'Normalized Difference Built-up Index',
            'formula': '(SWIR - NIR) / (SWIR + NIR)',
            'bands': ['swir', 'nir'],
            'range': [-1.0, 1.0],
        },
        'EVI': {
            'name': 'Enhanced Vegetation Index',
            'formula': '2.5 * ((NIR - Red) / (NIR + 6 * Red - 7.5 * Blue + 1))',
            'bands': ['red', 'nir', 'blue'],
            'range': [-1.0, 1.0],
        },
    },
    
    # HPC and job scheduler configuration
    'HPC': {
        'enabled': True,
        'scheduler': 'local',  # 'local', 'slurm', 'pbs'
        'job_script_template_dir': os.path.join(BASE_DIR, 'scripts', 'templates'),
        'job_output_dir': os.path.join(BASE_DIR, 'data', 'hpc_jobs'),
        'default_resources': {
            'memory': '8GB',
            'cpus': 2,
            'time': '1:00:00',
            'partition': 'compute',
        },
        'max_concurrent_jobs': 10,
        'status_check_interval': 30,  # seconds
    },
    
    # User quota and limits
    'QUOTAS': {
        'default_user': {
            'max_aois': 50,
            'max_downloads_per_month': 100,
            'max_storage_gb': 10,
            'max_processing_jobs': 20,
        },
        'power_user': {
            'max_aois': 200,
            'max_downloads_per_month': 500,
            'max_storage_gb': 100,
            'max_processing_jobs': 100,
        },
        'admin': {
            'max_aois': -1,  # unlimited
            'max_downloads_per_month': -1,
            'max_storage_gb': -1,
            'max_processing_jobs': -1,
        }
    },
    
    # Cache configuration
    'CACHE': {
        'enabled': True,
        'default_timeout': 3600,  # 1 hour
        'max_size_mb': 1000,  # 1 GB
        'cleanup_interval': 86400,  # 24 hours
    },
    
    # Security and validation
    'SECURITY': {
        'max_geometry_vertices': 10000,
        'max_aoi_area_km2': 10000,  # 100x100 km max AOI
        'allowed_file_types': ['.geojson', '.kml', '.shp', '.gpkg'],
        'max_upload_size_mb': 100,
        'validate_geometries': True,
    }
}

# Ensure all required directories exist
for path_key, path_value in GEOSPATIAL_REPO['STORAGE_PATHS'].items():
    os.makedirs(path_value, exist_ok=True)

# Create additional required directories
os.makedirs(GEOSPATIAL_REPO['HPC']['job_script_template_dir'], exist_ok=True)
os.makedirs(GEOSPATIAL_REPO['HPC']['job_output_dir'], exist_ok=True)
os.makedirs(GEOSPATIAL_REPO['PROCESSING']['temp_dir'], exist_ok=True)
os.makedirs(os.path.join(BASE_DIR, 'logs'), exist_ok=True)

# CORS settings for frontend-backend communication
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://localhost:5173",
    "http://localhost:5174",
    "http://127.0.0.1:3000",
    "http://127.0.0.1:5173",
    "http://127.0.0.1:5174",
]

CORS_ALLOW_CREDENTIALS = True

CORS_ALLOW_ALL_ORIGINS = DEBUG  # Only allow all origins in development

CORS_ALLOWED_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]
