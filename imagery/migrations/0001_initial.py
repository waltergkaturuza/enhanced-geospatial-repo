# Generated by Django 5.2.3 on 2025-10-04 15:29

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CoordinateReferenceSystem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('epsg_code', models.IntegerField(blank=True, null=True, unique=True)),
                ('proj4_string', models.TextField(blank=True, null=True)),
                ('wkt', models.TextField(blank=True, null=True)),
                ('authority', models.CharField(blank=True, max_length=100, null=True)),
                ('datum', models.CharField(blank=True, max_length=100, null=True)),
                ('ellipsoid', models.CharField(blank=True, max_length=100, null=True)),
                ('projection_name', models.CharField(blank=True, max_length=100, null=True)),
                ('units', models.CharField(blank=True, max_length=50, null=True)),
                ('is_geographic', models.BooleanField(default=False)),
                ('is_projected', models.BooleanField(default=False)),
                ('central_meridian', models.FloatField(blank=True, null=True)),
                ('false_easting', models.FloatField(blank=True, null=True)),
                ('false_northing', models.FloatField(blank=True, null=True)),
                ('standard_parallel_1', models.FloatField(blank=True, null=True)),
                ('standard_parallel_2', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Coordinate Reference System',
                'verbose_name_plural': 'Coordinate Reference Systems',
                'db_table': 'coordinate_reference_systems',
            },
        ),
        migrations.CreateModel(
            name='SpatialExtent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bbox_native_minx', models.FloatField(blank=True, null=True)),
                ('bbox_native_miny', models.FloatField(blank=True, null=True)),
                ('bbox_native_maxx', models.FloatField(blank=True, null=True)),
                ('bbox_native_maxy', models.FloatField(blank=True, null=True)),
                ('bbox_wgs84_minx', models.FloatField(blank=True, null=True)),
                ('bbox_wgs84_miny', models.FloatField(blank=True, null=True)),
                ('bbox_wgs84_maxx', models.FloatField(blank=True, null=True)),
                ('bbox_wgs84_maxy', models.FloatField(blank=True, null=True)),
                ('centroid_native_x', models.FloatField(blank=True, null=True)),
                ('centroid_native_y', models.FloatField(blank=True, null=True)),
                ('centroid_wgs84_x', models.FloatField(blank=True, null=True)),
                ('centroid_wgs84_y', models.FloatField(blank=True, null=True)),
                ('area_sq_meters', models.FloatField(blank=True, null=True)),
                ('area_sq_km', models.FloatField(blank=True, null=True)),
                ('perimeter_meters', models.FloatField(blank=True, null=True)),
                ('width_meters', models.FloatField(blank=True, null=True)),
                ('height_meters', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Spatial Extent',
                'verbose_name_plural': 'Spatial Extents',
                'db_table': 'spatial_extents',
            },
        ),
        migrations.CreateModel(
            name='AdministrativeBoundarySet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Name of the boundary set (e.g., 'Zimbabwe Administrative Boundaries 2023')", max_length=255)),
                ('description', models.TextField(blank=True, help_text='Description of the boundary set')),
                ('source', models.CharField(blank=True, help_text='Data source or provider', max_length=255)),
                ('upload_date', models.DateTimeField(auto_now_add=True)),
                ('coordinate_system', models.CharField(default='EPSG:4326', max_length=50)),
                ('data_year', models.IntegerField(blank=True, help_text='Year the boundaries represent', null=True)),
                ('is_public', models.BooleanField(default=True, help_text='Available to all users')),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('archived', 'Archived')], default='active', max_length=20)),
                ('original_filename', models.CharField(blank=True, max_length=255)),
                ('file_size_mb', models.FloatField(blank=True, null=True)),
                ('total_boundaries', models.IntegerField(default=0)),
                ('levels_included', models.JSONField(default=list, help_text='List of admin levels included')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('uploaded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='boundary_sets', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Administrative Boundary Set',
                'verbose_name_plural': 'Administrative Boundary Sets',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AOI',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('geometry', models.TextField(help_text='GeoJSON string when GIS unavailable')),
                ('tags', models.JSONField(blank=True, default=list)),
                ('is_public', models.BooleanField(default=False)),
                ('upload_source', models.CharField(blank=True, max_length=255)),
                ('area_km2', models.FloatField(blank=True, null=True)),
                ('is_valid', models.BooleanField(default=True)),
                ('validation_errors', models.JSONField(blank=True, default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='aois', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Area of Interest',
                'verbose_name_plural': 'Areas of Interest',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AOISatelliteImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('intersects', models.BooleanField(default=True)),
                ('intersection_area_km2', models.FloatField(blank=True, null=True)),
                ('coverage_percentage', models.FloatField(blank=True, null=True)),
                ('clipping_status', models.CharField(choices=[('pending', 'Pending'), ('queued', 'Queued'), ('processing', 'Processing'), ('complete', 'Complete'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('clipped_file_path', models.CharField(blank=True, max_length=500)),
                ('clipped_file_size_mb', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('aoi', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='imagery.aoi')),
            ],
        ),
        migrations.CreateModel(
            name='GeospatialDataProvider',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('code', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField(blank=True)),
                ('specializes_in', models.JSONField(blank=True, default=list)),
                ('supported_formats', models.JSONField(blank=True, default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('preferred_crs', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='preferred_by_providers', to='imagery.coordinatereferencesystem')),
                ('coverage_extent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='provider_coverage', to='imagery.spatialextent')),
            ],
            options={
                'db_table': 'geospatial_data_providers',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='EnhancedGeospatialFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('original_filename', models.CharField(max_length=255)),
                ('file_path', models.CharField(max_length=500)),
                ('file_size_bytes', models.BigIntegerField()),
                ('file_extension', models.CharField(max_length=20)),
                ('mime_type', models.CharField(blank=True, max_length=100)),
                ('data_type', models.CharField(choices=[('raster', 'Raster Data'), ('vector', 'Vector Data'), ('project', 'Project File'), ('point_cloud', 'Point Cloud'), ('tabular', 'Tabular Data'), ('other', 'Other')], max_length=20)),
                ('format_category', models.CharField(choices=[('satellite', 'Satellite Imagery'), ('drone', 'Drone Imagery'), ('aerial', 'Aerial Photography'), ('vector', 'Vector Data'), ('dem', 'Digital Elevation Model'), ('point_cloud', 'Point Cloud'), ('project', 'Project File'), ('other', 'Other')], max_length=20)),
                ('is_geospatial', models.BooleanField(default=False)),
                ('gdal_driver', models.CharField(blank=True, max_length=100)),
                ('ogr_driver', models.CharField(blank=True, max_length=100)),
                ('raster_width', models.IntegerField(blank=True, null=True)),
                ('raster_height', models.IntegerField(blank=True, null=True)),
                ('raster_band_count', models.IntegerField(blank=True, null=True)),
                ('pixel_size_x', models.FloatField(blank=True, null=True)),
                ('pixel_size_y', models.FloatField(blank=True, null=True)),
                ('has_rotation', models.BooleanField(default=False)),
                ('has_colormap', models.BooleanField(default=False)),
                ('vector_layer_count', models.IntegerField(blank=True, null=True)),
                ('vector_feature_count', models.IntegerField(blank=True, null=True)),
                ('geometry_types', models.JSONField(blank=True, default=list)),
                ('statistics', models.JSONField(blank=True, default=dict)),
                ('ai_scene_description', models.TextField(blank=True)),
                ('ai_detected_objects', models.JSONField(blank=True, default=list)),
                ('ai_confidence_scores', models.JSONField(blank=True, default=dict)),
                ('ai_land_cover_analysis', models.JSONField(blank=True, default=dict)),
                ('province', models.CharField(max_length=100)),
                ('district', models.CharField(max_length=100)),
                ('acquisition_date', models.DateTimeField(blank=True, null=True)),
                ('processing_date', models.DateTimeField(auto_now_add=True)),
                ('is_public', models.BooleanField(default=False)),
                ('validation_status', models.CharField(choices=[('pending', 'Pending'), ('valid', 'Valid'), ('warning', 'Warning'), ('error', 'Error')], default='pending', max_length=20)),
                ('validation_messages', models.JSONField(blank=True, default=list)),
                ('metadata_json', models.JSONField(blank=True, default=dict)),
                ('tags', models.JSONField(blank=True, default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('crs', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='files', to='imagery.coordinatereferencesystem')),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='files', to='imagery.geospatialdataprovider')),
                ('spatial_extent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='files', to='imagery.spatialextent')),
            ],
            options={
                'db_table': 'enhanced_geospatial_files',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProcessingJob',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('job_type', models.CharField(choices=[('download', 'Download'), ('clip', 'Clip to AOI'), ('index', 'Compute Index'), ('batch_process', 'Batch Processing'), ('custom', 'Custom Processing')], max_length=30)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('queued', 'Queued'), ('processing', 'Processing'), ('complete', 'Complete'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('priority', models.IntegerField(default=5, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('slurm_job_id', models.CharField(blank=True, max_length=50, null=True)),
                ('allocated_cores', models.IntegerField(blank=True, null=True)),
                ('allocated_memory_gb', models.FloatField(blank=True, null=True)),
                ('estimated_runtime_minutes', models.IntegerField(blank=True, null=True)),
                ('progress_percentage', models.FloatField(default=0.0)),
                ('log_file_path', models.CharField(blank=True, max_length=500)),
                ('error_message', models.TextField(blank=True)),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('input_parameters', models.JSONField(default=dict)),
                ('output_files', models.JSONField(blank=True, default=list)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='processing_jobs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-submitted_at'],
            },
        ),
        migrations.CreateModel(
            name='SatelliteImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('provider', models.CharField(choices=[('SENTINEL1', 'Sentinel-1 (SAR)'), ('SENTINEL2', 'Sentinel-2 (Optical)'), ('LANDSAT8', 'Landsat 8'), ('LANDSAT9', 'Landsat 9'), ('MODIS', 'MODIS'), ('PLANET', 'Planet'), ('CUSTOM', 'Custom Provider')], max_length=32)),
                ('tile_id', models.CharField(db_index=True, max_length=128)),
                ('scene_id', models.CharField(blank=True, db_index=True, max_length=128)),
                ('sensed_at', models.DateTimeField(db_index=True)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('ingested_at', models.DateTimeField(auto_now_add=True)),
                ('cloud_cover', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('data_quality', models.CharField(choices=[('excellent', 'Excellent'), ('good', 'Good'), ('fair', 'Fair'), ('poor', 'Poor')], default='good', max_length=20)),
                ('bounds', models.TextField(help_text='GeoJSON string when GIS unavailable')),
                ('centroid', models.TextField(blank=True, help_text='GeoJSON point when GIS unavailable', null=True)),
                ('file_path', models.CharField(max_length=500)),
                ('file_size_mb', models.FloatField(blank=True, null=True)),
                ('bands', models.JSONField(blank=True, null=True)),
                ('processing_level', models.CharField(default='L1C', max_length=10)),
                ('coordinate_system', models.CharField(default='EPSG:4326', max_length=20)),
                ('pixel_resolution_m', models.FloatField(blank=True, null=True)),
                ('meta', models.JSONField(blank=True, null=True)),
                ('preview_url', models.URLField(blank=True, null=True)),
                ('thumbnail_url', models.URLField(blank=True, null=True)),
                ('is_available', models.BooleanField(default=True)),
                ('download_url', models.URLField(blank=True, null=True)),
                ('archive_status', models.CharField(choices=[('online', 'Online'), ('nearline', 'Nearline'), ('offline', 'Offline')], default='online', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('aois', models.ManyToManyField(blank=True, related_name='satellite_images', through='imagery.AOISatelliteImage', to='imagery.aoi')),
            ],
            options={
                'ordering': ['-sensed_at'],
            },
        ),
        migrations.CreateModel(
            name='IndexResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('index_type', models.CharField(choices=[('NDVI', 'Normalized Difference Vegetation Index'), ('NDWI', 'Normalized Difference Water Index'), ('EVI', 'Enhanced Vegetation Index'), ('SAVI', 'Soil Adjusted Vegetation Index'), ('NDBI', 'Normalized Difference Built-up Index'), ('MNDWI', 'Modified Normalized Difference Water Index'), ('CUSTOM', 'Custom Index')], max_length=32)),
                ('custom_formula', models.TextField(blank=True)),
                ('mean_value', models.FloatField(blank=True, null=True)),
                ('median_value', models.FloatField(blank=True, null=True)),
                ('std_deviation', models.FloatField(blank=True, null=True)),
                ('min_value', models.FloatField(blank=True, null=True)),
                ('max_value', models.FloatField(blank=True, null=True)),
                ('raster_file_path', models.CharField(blank=True, max_length=500)),
                ('thumbnail_path', models.CharField(blank=True, max_length=500)),
                ('histogram_data', models.JSONField(blank=True, null=True)),
                ('computation_method', models.CharField(default='standard', max_length=50)),
                ('computed_at', models.DateTimeField(auto_now_add=True)),
                ('meta', models.JSONField(blank=True, null=True)),
                ('aoi', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='indices', to='imagery.aoi')),
                ('processing_job', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='imagery.processingjob')),
                ('satellite_image', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='indices', to='imagery.satelliteimage')),
            ],
            options={
                'ordering': ['-computed_at'],
            },
        ),
        migrations.CreateModel(
            name='Download',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('clip_to_aoi', models.BooleanField(default=True)),
                ('output_format', models.CharField(choices=[('geotiff', 'GeoTIFF'), ('cog', 'Cloud Optimized GeoTIFF'), ('netcdf', 'NetCDF')], default='geotiff', max_length=20)),
                ('compression', models.CharField(choices=[('none', 'None'), ('lzw', 'LZW'), ('jpeg', 'JPEG'), ('deflate', 'Deflate')], default='lzw', max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('queued', 'Queued'), ('processing', 'Processing'), ('complete', 'Complete'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('progress_percentage', models.FloatField(default=0.0)),
                ('output_file_path', models.CharField(blank=True, max_length=500)),
                ('file_size_gb', models.FloatField(blank=True, null=True)),
                ('download_url', models.URLField(blank=True, null=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('requested_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('downloaded_at', models.DateTimeField(blank=True, null=True)),
                ('log', models.TextField(blank=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('aoi', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='downloads', to='imagery.aoi')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='downloads', to=settings.AUTH_USER_MODEL)),
                ('processing_job', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='imagery.processingjob')),
                ('satellite_images', models.ManyToManyField(related_name='downloads', to='imagery.satelliteimage')),
            ],
            options={
                'ordering': ['-requested_at'],
            },
        ),
        migrations.AddField(
            model_name='aoisatelliteimage',
            name='satellite_image',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='imagery.satelliteimage'),
        ),
        migrations.CreateModel(
            name='GeospatialProcessingJob',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('job_type', models.CharField(choices=[('metadata_extraction', 'Metadata Extraction'), ('crs_transformation', 'CRS Transformation'), ('spatial_analysis', 'Spatial Analysis'), ('format_conversion', 'Format Conversion'), ('ai_analysis', 'AI Analysis'), ('validation', 'Data Validation'), ('mosaic', 'Image Mosaicking'), ('clip', 'Spatial Clipping'), ('reproject', 'Reprojection'), ('other', 'Other')], max_length=30)),
                ('processing_parameters', models.JSONField(blank=True, default=dict)),
                ('status', models.CharField(choices=[('queued', 'Queued'), ('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='queued', max_length=20)),
                ('progress_percentage', models.IntegerField(default=0)),
                ('start_time', models.DateTimeField(blank=True, null=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('result_metadata', models.JSONField(blank=True, default=dict)),
                ('error_message', models.TextField(blank=True)),
                ('log_messages', models.JSONField(blank=True, default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('input_files', models.ManyToManyField(related_name='input_processing_jobs', to='imagery.enhancedgeospatialfile')),
                ('output_files', models.ManyToManyField(blank=True, related_name='output_processing_jobs', to='imagery.enhancedgeospatialfile')),
                ('source_crs', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='source_jobs', to='imagery.coordinatereferencesystem')),
                ('target_crs', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='target_jobs', to='imagery.coordinatereferencesystem')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('processing_extent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='processing_jobs', to='imagery.spatialextent')),
            ],
            options={
                'db_table': 'geospatial_processing_jobs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('max_aois', models.IntegerField(default=10)),
                ('max_download_size_gb', models.FloatField(default=50.0)),
                ('max_concurrent_downloads', models.IntegerField(default=3)),
                ('current_aois', models.IntegerField(default=0)),
                ('current_download_size_gb', models.FloatField(default=0.0)),
                ('current_downloads', models.IntegerField(default=0)),
                ('default_cloud_cover_threshold', models.FloatField(default=20.0)),
                ('preferred_providers', models.JSONField(blank=True, default=list)),
                ('notification_email', models.EmailField(blank=True, max_length=254)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='AdministrativeBoundary',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.CharField(choices=[('country', 'Country'), ('province', 'Province/State'), ('district', 'District/County'), ('ward', 'Ward/Municipality')], max_length=20)),
                ('name', models.CharField(help_text='Official name of the administrative unit', max_length=255)),
                ('code', models.CharField(blank=True, help_text='Official code (if available)', max_length=50)),
                ('name_0', models.CharField(blank=True, help_text='Country name', max_length=255)),
                ('name_1', models.CharField(blank=True, help_text='Province/State name', max_length=255)),
                ('name_2', models.CharField(blank=True, help_text='District/County name', max_length=255)),
                ('name_3', models.CharField(blank=True, help_text='Ward/Municipality name', max_length=255)),
                ('geometry', models.TextField(help_text='GeoJSON string when GIS unavailable')),
                ('centroid', models.TextField(blank=True, help_text='GeoJSON point when GIS unavailable', null=True)),
                ('area_km2', models.FloatField(blank=True, null=True)),
                ('perimeter_km', models.FloatField(blank=True, null=True)),
                ('attributes', models.JSONField(default=dict, help_text='Additional attributes from source data')),
                ('is_active', models.BooleanField(default=True)),
                ('population', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='imagery.administrativeboundary')),
                ('boundary_set', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='boundaries', to='imagery.administrativeboundaryset')),
            ],
            options={
                'verbose_name': 'Administrative Boundary',
                'verbose_name_plural': 'Administrative Boundaries',
                'ordering': ['level', 'name'],
                'indexes': [models.Index(fields=['boundary_set', 'level'], name='imagery_adm_boundar_b0e1f4_idx'), models.Index(fields=['level', 'name'], name='imagery_adm_level_46877e_idx'), models.Index(fields=['name_0', 'name_1', 'name_2'], name='imagery_adm_name_0_f8a832_idx')],
                'unique_together': {('boundary_set', 'level', 'name', 'name_0', 'name_1', 'name_2')},
            },
        ),
        migrations.AddIndex(
            model_name='aoi',
            index=models.Index(fields=['user', '-created_at'], name='imagery_aoi_user_id_be96d8_idx'),
        ),
        migrations.AddIndex(
            model_name='aoi',
            index=models.Index(fields=['is_public', '-created_at'], name='imagery_aoi_is_publ_8bca60_idx'),
        ),
        migrations.AddIndex(
            model_name='processingjob',
            index=models.Index(fields=['user', 'status'], name='imagery_pro_user_id_fb1b99_idx'),
        ),
        migrations.AddIndex(
            model_name='processingjob',
            index=models.Index(fields=['status', 'priority'], name='imagery_pro_status_67002b_idx'),
        ),
        migrations.AddIndex(
            model_name='processingjob',
            index=models.Index(fields=['job_type', '-submitted_at'], name='imagery_pro_job_typ_007799_idx'),
        ),
        migrations.AddIndex(
            model_name='satelliteimage',
            index=models.Index(fields=['provider', '-sensed_at'], name='imagery_sat_provide_42eac2_idx'),
        ),
        migrations.AddIndex(
            model_name='satelliteimage',
            index=models.Index(fields=['cloud_cover', '-sensed_at'], name='imagery_sat_cloud_c_81cd2d_idx'),
        ),
        migrations.AddIndex(
            model_name='satelliteimage',
            index=models.Index(fields=['is_available', '-sensed_at'], name='imagery_sat_is_avai_d0a5b5_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='satelliteimage',
            unique_together={('provider', 'tile_id', 'sensed_at')},
        ),
        migrations.AddIndex(
            model_name='indexresult',
            index=models.Index(fields=['aoi', 'index_type', '-computed_at'], name='imagery_ind_aoi_id_e6e96e_idx'),
        ),
        migrations.AddIndex(
            model_name='indexresult',
            index=models.Index(fields=['satellite_image', 'index_type'], name='imagery_ind_satelli_c4a72e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='indexresult',
            unique_together={('aoi', 'satellite_image', 'index_type')},
        ),
        migrations.AddIndex(
            model_name='download',
            index=models.Index(fields=['user', 'status'], name='imagery_dow_user_id_d7defb_idx'),
        ),
        migrations.AddIndex(
            model_name='download',
            index=models.Index(fields=['status', '-requested_at'], name='imagery_dow_status_6468bd_idx'),
        ),
        migrations.AddIndex(
            model_name='aoisatelliteimage',
            index=models.Index(fields=['aoi', '-created_at'], name='imagery_aoi_aoi_id_1e21ee_idx'),
        ),
        migrations.AddIndex(
            model_name='aoisatelliteimage',
            index=models.Index(fields=['satellite_image', '-created_at'], name='imagery_aoi_satelli_49eda7_idx'),
        ),
        migrations.AddIndex(
            model_name='aoisatelliteimage',
            index=models.Index(fields=['clipping_status'], name='imagery_aoi_clippin_f95189_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='aoisatelliteimage',
            unique_together={('aoi', 'satellite_image')},
        ),
        migrations.AddIndex(
            model_name='enhancedgeospatialfile',
            index=models.Index(fields=['data_type', 'format_category'], name='enhanced_ge_data_ty_4e6f24_idx'),
        ),
        migrations.AddIndex(
            model_name='enhancedgeospatialfile',
            index=models.Index(fields=['provider', 'province', 'district'], name='enhanced_ge_provide_41b7f6_idx'),
        ),
        migrations.AddIndex(
            model_name='enhancedgeospatialfile',
            index=models.Index(fields=['acquisition_date'], name='enhanced_ge_acquisi_1a77b1_idx'),
        ),
        migrations.AddIndex(
            model_name='enhancedgeospatialfile',
            index=models.Index(fields=['is_geospatial', 'validation_status'], name='enhanced_ge_is_geos_0bc705_idx'),
        ),
    ]
